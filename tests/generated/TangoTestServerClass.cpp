/*----- PROTECTED REGION ID(TangoTestServerClass.cpp) ENABLED START -----*/
/* clang-format on */
//=============================================================================
//
// file :        TangoTestServerClass.cpp
//
// description : C++ source for the TangoTestServerClass.
//               A singleton class derived from DeviceClass.
//               It implements the command and attribute list
//               and all properties and methods required
//               by the TangoTestServer once per process.
//
// project :     TangoTestServer
//
// This file is part of Tango device class.
//
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
//
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================

#include "TangoTestServerClass.h"
/* clang-format off */
/*----- PROTECTED REGION END -----*/	//	TangoTestServerClass.cpp

/*--------------------------------------------------------------------------------------------------------------------*/
/**
 *	Create TangoTestServerClass singleton and
 *	return it in a C function for Python usage
 */
/*--------------------------------------------------------------------------------------------------------------------*/
extern "C" {
#ifdef _TG_WINDOWS_

__declspec(dllexport)

#endif

	Tango::DeviceClass *_create_TangoTestServer_class(const char *name) {
		return TangoTestServer_ns::TangoTestServerClass::init(name);
	}
}

namespace TangoTestServer_ns
{
//===================================================================
//	Initialize pointer for singleton pattern
//===================================================================
TangoTestServerClass *TangoTestServerClass::_instance = NULL;

//===================================================================
//	Class constants
//===================================================================
constexpr long DoubleSpectrumAttrib::X_DATA_SIZE;
constexpr long DoubleRoSpectrumAttrib::X_DATA_SIZE;
constexpr long DoubleWoSpectrumAttrib::X_DATA_SIZE;
constexpr long FloatSpectrumAttrib::X_DATA_SIZE;
constexpr long FloatRoSpectrumAttrib::X_DATA_SIZE;
constexpr long FloatWoSpectrumAttrib::X_DATA_SIZE;
constexpr long IntSpectrumAttrib::X_DATA_SIZE;
constexpr long IntRoSpectrumAttrib::X_DATA_SIZE;
constexpr long IntWoSpectrumAttrib::X_DATA_SIZE;
constexpr long StringSpectrumAttrib::X_DATA_SIZE;
constexpr long StringRoSpectrumAttrib::X_DATA_SIZE;
constexpr long StringWoSpectrumAttrib::X_DATA_SIZE;
/*--------------------------------------------------------------------------------------------------------------------*/
/**
 * method : 		TangoTestServerClass::TangoTestServerClass(std::string &s)
 * description : 	constructor for the TangoTestServerClass
 *
 * @param s	The class name
 */
/*--------------------------------------------------------------------------------------------------------------------*/
TangoTestServerClass::TangoTestServerClass(std::string &s):Tango::DeviceClass(s)
{
	TANGO_LOG_INFO << "Entering TangoTestServerClass constructor" << std::endl;
	set_default_property();
	write_class_property();

	/*----- PROTECTED REGION ID(TangoTestServerClass::constructor) ENABLED START -----*/
    /* clang-format on */
    /* clang-format off */
	/*----- PROTECTED REGION END -----*/	//	TangoTestServerClass::constructor

	TANGO_LOG_INFO << "Leaving TangoTestServerClass constructor" << std::endl;
}

/*--------------------------------------------------------------------------------------------------------------------*/
/**
 * method : 		TangoTestServerClass::~TangoTestServerClass()
 * description : 	destructor for the TangoTestServerClass
 */
/*--------------------------------------------------------------------------------------------------------------------*/
TangoTestServerClass::~TangoTestServerClass()
{
	/*----- PROTECTED REGION ID(TangoTestServerClass::destructor) ENABLED START -----*/
    /* clang-format on */
    /* clang-format off */
	/*----- PROTECTED REGION END -----*/	//	TangoTestServerClass::destructor

	_instance = NULL;
}


/*--------------------------------------------------------------------------------------------------------------------*/
/**
 * method : 		TangoTestServerClass::init
 * description : 	Create the object if not already done.
 *                  Otherwise, just return a pointer to the object
 *
 * @param	name	The class name
 */
/*--------------------------------------------------------------------------------------------------------------------*/
TangoTestServerClass *TangoTestServerClass::init(const char *name)
{
	if (_instance == NULL)
	{
		try
		{
			std::string s(name);
			_instance = new TangoTestServerClass(s);
		}
		catch (std::bad_alloc &)
		{
			throw;
		}
	}
	return _instance;
}

/*--------------------------------------------------------------------------------------------------------------------*/
/**
 * method : 		TangoTestServerClass::instance
 * description : 	Check if object already created,
 *                  and return a pointer to the object
 */
/*--------------------------------------------------------------------------------------------------------------------*/
TangoTestServerClass *TangoTestServerClass::instance()
{
	if (_instance == NULL)
	{
		std::cerr << "Class is not initialised !!" << std::endl;
		exit(-1);
	}
	return _instance;
}



//===================================================================
//	Command execution method calls
//===================================================================

//===================================================================
//	Properties management
//===================================================================
/*--------------------------------------------------------------------------------------------------------------------*/
/**
 *	Method      : TangoTestServerClass::get_class_property()
 * Description:  Get the class property for specified name.
 */
/*--------------------------------------------------------------------------------------------------------------------*/
Tango::DbDatum TangoTestServerClass::get_class_property(std::string &prop_name)
{
	for (unsigned int i=0 ; i<cl_prop.size() ; i++)
		if (cl_prop[i].name == prop_name)
			return cl_prop[i];
	//	if not found, returns  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

/*--------------------------------------------------------------------------------------------------------------------*/
/**
 *	Method      : TangoTestServerClass::get_default_device_property()
 * Description:  Return the default value for device property.
 */
/*--------------------------------------------------------------------------------------------------------------------*/
Tango::DbDatum TangoTestServerClass::get_default_device_property(std::string &prop_name)
{
	for (unsigned int i=0 ; i<dev_def_prop.size() ; i++)
		if (dev_def_prop[i].name == prop_name)
			return dev_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

/*--------------------------------------------------------------------------------------------------------------------*/
/**
 *	Method      : TangoTestServerClass::get_default_class_property()
 * Description:  Return the default value for class property.
 */
/*--------------------------------------------------------------------------------------------------------------------*/
Tango::DbDatum TangoTestServerClass::get_default_class_property(std::string &prop_name)
{
	for (unsigned int i=0 ; i<cl_def_prop.size() ; i++)
		if (cl_def_prop[i].name == prop_name)
			return cl_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}


/*--------------------------------------------------------------------------------------------------------------------*/
/**
 *	Method      : TangoTestServerClass::set_default_property()
 * Description:  Set default property (class and device) for wizard.
 *                For each property, add to wizard property name and description.
 *                If default value has been set, add it to wizard property and
 *                store it in a DbDatum.
 */
/*--------------------------------------------------------------------------------------------------------------------*/
void TangoTestServerClass::set_default_property()
{
	std::string	prop_name;
	std::string	prop_desc;
	std::string	prop_def;
	std::vector<std::string>	vect_data;

	//	Set Default Class Properties

	//	Set Default device Properties
}

/*--------------------------------------------------------------------------------------------------------------------*/
/**
 *	Method      : TangoTestServerClass::write_class_property()
 * Description:  Set class description fields as property in database
 */
/*--------------------------------------------------------------------------------------------------------------------*/
void TangoTestServerClass::write_class_property()
{
//	First time, check if database used
if (Tango::Util::_UseDb == false)
	return;

Tango::DbData	data;
std::string	classname = get_name();
std::string	header;

//	Put title
Tango::DbDatum	title("ProjectTitle");
std::string	str_title("TangoTestServer");
title << str_title;
data.push_back(title);

//	Put Description
Tango::DbDatum	description("Description");
std::vector<std::string>	str_desc;
str_desc.push_back("");
description << str_desc;
data.push_back(description);

//  Put inheritance
Tango::DbDatum	inher_datum("InheritedFrom");
std::vector<std::string> inheritance;
inheritance.push_back("TANGO_BASE_CLASS");
inher_datum << inheritance;
data.push_back(inher_datum);

//	Call database and and values
get_db_class()->put_property(data);
}

//===================================================================
//	Factory methods
//===================================================================

/*--------------------------------------------------------------------------------------------------------------------*/
/**
 *	Method      : TangoTestServerClass::device_factory()
 * Description:  Create the device object(s)
 *                and store them in the device list
 */
/*--------------------------------------------------------------------------------------------------------------------*/
void TangoTestServerClass::device_factory(const Tango::DevVarStringArray *devlist_ptr)
{
/*----- PROTECTED REGION ID(TangoTestServerClass::device_factory_before) ENABLED START -----*/
    /* clang-format on */
    //	Add your own code
    /* clang-format off */
/*----- PROTECTED REGION END -----*/	//	TangoTestServerClass::device_factory_before

//	Create devices and add it into the device list
for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
{
	TANGO_LOG_DEBUG << "Device name : " << (*devlist_ptr)[i].in() << std::endl;
	device_list.push_back(new TangoTestServer(this, (*devlist_ptr)[i]));
}

//	Manage dynamic attributes if any
erase_dynamic_attributes(devlist_ptr, get_class_attr()->get_attr_list());

//	Export devices to the outside world
for (unsigned long i=1 ; i<=devlist_ptr->length() ; i++)
{
	//	Add dynamic attributes if any
	TangoTestServer *dev = static_cast<TangoTestServer *>(device_list[device_list.size()-i]);
	dev->add_dynamic_attributes();

	//	Check before if database used.
	if ((Tango::Util::_UseDb == true) && (Tango::Util::_FileDb == false))
		export_device(dev);
	else
		export_device(dev, dev->get_name().c_str());
}

/*----- PROTECTED REGION ID(TangoTestServerClass::device_factory_after) ENABLED START -----*/
    /* clang-format on */
    //	Add your own code
    /* clang-format off */
/*----- PROTECTED REGION END -----*/	//	TangoTestServerClass::device_factory_after
}
/*--------------------------------------------------------------------------------------------------------------------*/
/**
 *	Method      : TangoTestServerClass::attribute_factory()
 * Description:  Create the attribute object(s)
 *                and store them in the attribute list
 */
/*--------------------------------------------------------------------------------------------------------------------*/
void TangoTestServerClass::attribute_factory(std::vector<Tango::Attr *> &att_list)
{
	/*----- PROTECTED REGION ID(TangoTestServerClass::attribute_factory_before) ENABLED START -----*/
    /* clang-format on */
    {
      auto* invalid = new FaultAttribute(Tango::AttrQuality::ATTR_INVALID, "InvalidValue");
      Tango::UserDefaultAttrProp defaultProperty;
      invalid->set_default_properties(defaultProperty);
      invalid->set_disp_level(Tango::DispLevel::OPERATOR);
      att_list.push_back(invalid);
    }

    {
      auto* alarm = new FaultAttribute(Tango::AttrQuality::ATTR_ALARM, "AlarmValue");
      Tango::UserDefaultAttrProp defaultProperty;
      alarm->set_default_properties(defaultProperty);
      alarm->set_disp_level(Tango::DispLevel::OPERATOR);
      att_list.push_back(alarm);
    }

    {
      auto* warning = new FaultAttribute(Tango::AttrQuality::ATTR_WARNING, "WarningValue");
      Tango::UserDefaultAttrProp defaultProperty;
      warning->set_default_properties(defaultProperty);
      warning->set_disp_level(Tango::DispLevel::OPERATOR);
      att_list.push_back(warning);
    }

    {
      auto* changing = new FaultAttribute(Tango::AttrQuality::ATTR_CHANGING, "ChangingValue");
      Tango::UserDefaultAttrProp defaultProperty;
      changing->set_default_properties(defaultProperty);
      changing->set_disp_level(Tango::DispLevel::OPERATOR);
      att_list.push_back(changing);
    }

    //	Add your own code
    /* clang-format off */
	/*----- PROTECTED REGION END -----*/	//	TangoTestServerClass::attribute_factory_before
	//	Attribute : DoubleScalar
	DoubleScalarAttrib	*doublescalar = new DoubleScalarAttrib();
	Tango::UserDefaultAttrProp	doublescalar_prop;
	//	description	not set for DoubleScalar
	//	label	not set for DoubleScalar
	//	unit	not set for DoubleScalar
	//	standard_unit	not set for DoubleScalar
	//	display_unit	not set for DoubleScalar
	//	format	not set for DoubleScalar
	//	max_value	not set for DoubleScalar
	//	min_value	not set for DoubleScalar
	//	max_alarm	not set for DoubleScalar
	//	min_alarm	not set for DoubleScalar
	//	max_warning	not set for DoubleScalar
	//	min_warning	not set for DoubleScalar
	//	delta_t	not set for DoubleScalar
	//	delta_val	not set for DoubleScalar
	doublescalar->set_default_properties(doublescalar_prop);
	//	Not Polled
	doublescalar->set_disp_level(Tango::OPERATOR);
	doublescalar->set_memorized();
	doublescalar->set_memorized_init(true);
	att_list.push_back(doublescalar);

	//	Attribute : DoubleRoScalar
	DoubleRoScalarAttrib	*doubleroscalar = new DoubleRoScalarAttrib();
	Tango::UserDefaultAttrProp	doubleroscalar_prop;
	//	description	not set for DoubleRoScalar
	//	label	not set for DoubleRoScalar
	//	unit	not set for DoubleRoScalar
	//	standard_unit	not set for DoubleRoScalar
	//	display_unit	not set for DoubleRoScalar
	//	format	not set for DoubleRoScalar
	//	max_value	not set for DoubleRoScalar
	//	min_value	not set for DoubleRoScalar
	//	max_alarm	not set for DoubleRoScalar
	//	min_alarm	not set for DoubleRoScalar
	//	max_warning	not set for DoubleRoScalar
	//	min_warning	not set for DoubleRoScalar
	//	delta_t	not set for DoubleRoScalar
	//	delta_val	not set for DoubleRoScalar
	doubleroscalar->set_default_properties(doubleroscalar_prop);
	//	Not Polled
	doubleroscalar->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(doubleroscalar);

	//	Attribute : DoubleWoScalar
	DoubleWoScalarAttrib	*doublewoscalar = new DoubleWoScalarAttrib();
	Tango::UserDefaultAttrProp	doublewoscalar_prop;
	//	description	not set for DoubleWoScalar
	//	label	not set for DoubleWoScalar
	//	unit	not set for DoubleWoScalar
	//	standard_unit	not set for DoubleWoScalar
	//	display_unit	not set for DoubleWoScalar
	//	format	not set for DoubleWoScalar
	//	max_value	not set for DoubleWoScalar
	//	min_value	not set for DoubleWoScalar
	//	max_alarm	not set for DoubleWoScalar
	//	min_alarm	not set for DoubleWoScalar
	//	max_warning	not set for DoubleWoScalar
	//	min_warning	not set for DoubleWoScalar
	//	delta_t	not set for DoubleWoScalar
	//	delta_val	not set for DoubleWoScalar
	doublewoscalar->set_default_properties(doublewoscalar_prop);
	//	Not Polled
	doublewoscalar->set_disp_level(Tango::OPERATOR);
	doublewoscalar->set_memorized();
	doublewoscalar->set_memorized_init(true);
	att_list.push_back(doublewoscalar);

	//	Attribute : FloatScalar
	FloatScalarAttrib	*floatscalar = new FloatScalarAttrib();
	Tango::UserDefaultAttrProp	floatscalar_prop;
	//	description	not set for FloatScalar
	//	label	not set for FloatScalar
	//	unit	not set for FloatScalar
	//	standard_unit	not set for FloatScalar
	//	display_unit	not set for FloatScalar
	//	format	not set for FloatScalar
	//	max_value	not set for FloatScalar
	//	min_value	not set for FloatScalar
	//	max_alarm	not set for FloatScalar
	//	min_alarm	not set for FloatScalar
	//	max_warning	not set for FloatScalar
	//	min_warning	not set for FloatScalar
	//	delta_t	not set for FloatScalar
	//	delta_val	not set for FloatScalar
	floatscalar->set_default_properties(floatscalar_prop);
	//	Not Polled
	floatscalar->set_disp_level(Tango::OPERATOR);
	floatscalar->set_memorized();
	floatscalar->set_memorized_init(true);
	att_list.push_back(floatscalar);

	//	Attribute : FloatRoScalar
	FloatRoScalarAttrib	*floatroscalar = new FloatRoScalarAttrib();
	Tango::UserDefaultAttrProp	floatroscalar_prop;
	//	description	not set for FloatRoScalar
	//	label	not set for FloatRoScalar
	//	unit	not set for FloatRoScalar
	//	standard_unit	not set for FloatRoScalar
	//	display_unit	not set for FloatRoScalar
	//	format	not set for FloatRoScalar
	//	max_value	not set for FloatRoScalar
	//	min_value	not set for FloatRoScalar
	//	max_alarm	not set for FloatRoScalar
	//	min_alarm	not set for FloatRoScalar
	//	max_warning	not set for FloatRoScalar
	//	min_warning	not set for FloatRoScalar
	//	delta_t	not set for FloatRoScalar
	//	delta_val	not set for FloatRoScalar
	floatroscalar->set_default_properties(floatroscalar_prop);
	//	Not Polled
	floatroscalar->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(floatroscalar);

	//	Attribute : FloatWoScalar
	FloatWoScalarAttrib	*floatwoscalar = new FloatWoScalarAttrib();
	Tango::UserDefaultAttrProp	floatwoscalar_prop;
	//	description	not set for FloatWoScalar
	//	label	not set for FloatWoScalar
	//	unit	not set for FloatWoScalar
	//	standard_unit	not set for FloatWoScalar
	//	display_unit	not set for FloatWoScalar
	//	format	not set for FloatWoScalar
	//	max_value	not set for FloatWoScalar
	//	min_value	not set for FloatWoScalar
	//	max_alarm	not set for FloatWoScalar
	//	min_alarm	not set for FloatWoScalar
	//	max_warning	not set for FloatWoScalar
	//	min_warning	not set for FloatWoScalar
	//	delta_t	not set for FloatWoScalar
	//	delta_val	not set for FloatWoScalar
	floatwoscalar->set_default_properties(floatwoscalar_prop);
	//	Not Polled
	floatwoscalar->set_disp_level(Tango::OPERATOR);
	floatwoscalar->set_memorized();
	floatwoscalar->set_memorized_init(true);
	att_list.push_back(floatwoscalar);

	//	Attribute : IntScalar
	IntScalarAttrib	*intscalar = new IntScalarAttrib();
	Tango::UserDefaultAttrProp	intscalar_prop;
	//	description	not set for IntScalar
	//	label	not set for IntScalar
	//	unit	not set for IntScalar
	//	standard_unit	not set for IntScalar
	//	display_unit	not set for IntScalar
	//	format	not set for IntScalar
	//	max_value	not set for IntScalar
	//	min_value	not set for IntScalar
	//	max_alarm	not set for IntScalar
	//	min_alarm	not set for IntScalar
	//	max_warning	not set for IntScalar
	//	min_warning	not set for IntScalar
	//	delta_t	not set for IntScalar
	//	delta_val	not set for IntScalar
	intscalar->set_default_properties(intscalar_prop);
	//	Not Polled
	intscalar->set_disp_level(Tango::OPERATOR);
	intscalar->set_memorized();
	intscalar->set_memorized_init(true);
	att_list.push_back(intscalar);

	//	Attribute : IntRoScalar
	IntRoScalarAttrib	*introscalar = new IntRoScalarAttrib();
	Tango::UserDefaultAttrProp	introscalar_prop;
	//	description	not set for IntRoScalar
	//	label	not set for IntRoScalar
	//	unit	not set for IntRoScalar
	//	standard_unit	not set for IntRoScalar
	//	display_unit	not set for IntRoScalar
	//	format	not set for IntRoScalar
	//	max_value	not set for IntRoScalar
	//	min_value	not set for IntRoScalar
	//	max_alarm	not set for IntRoScalar
	//	min_alarm	not set for IntRoScalar
	//	max_warning	not set for IntRoScalar
	//	min_warning	not set for IntRoScalar
	//	delta_t	not set for IntRoScalar
	//	delta_val	not set for IntRoScalar
	introscalar->set_default_properties(introscalar_prop);
	//	Not Polled
	introscalar->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(introscalar);

	//	Attribute : IntWoScalar
	IntWoScalarAttrib	*intwoscalar = new IntWoScalarAttrib();
	Tango::UserDefaultAttrProp	intwoscalar_prop;
	//	description	not set for IntWoScalar
	//	label	not set for IntWoScalar
	//	unit	not set for IntWoScalar
	//	standard_unit	not set for IntWoScalar
	//	display_unit	not set for IntWoScalar
	//	format	not set for IntWoScalar
	//	max_value	not set for IntWoScalar
	//	min_value	not set for IntWoScalar
	//	max_alarm	not set for IntWoScalar
	//	min_alarm	not set for IntWoScalar
	//	max_warning	not set for IntWoScalar
	//	min_warning	not set for IntWoScalar
	//	delta_t	not set for IntWoScalar
	//	delta_val	not set for IntWoScalar
	intwoscalar->set_default_properties(intwoscalar_prop);
	//	Not Polled
	intwoscalar->set_disp_level(Tango::OPERATOR);
	intwoscalar->set_memorized();
	intwoscalar->set_memorized_init(true);
	att_list.push_back(intwoscalar);

	//	Attribute : StringScalar
	StringScalarAttrib	*stringscalar = new StringScalarAttrib();
	Tango::UserDefaultAttrProp	stringscalar_prop;
	//	description	not set for StringScalar
	//	label	not set for StringScalar
	//	unit	not set for StringScalar
	//	standard_unit	not set for StringScalar
	//	display_unit	not set for StringScalar
	//	format	not set for StringScalar
	//	max_value	not set for StringScalar
	//	min_value	not set for StringScalar
	//	max_alarm	not set for StringScalar
	//	min_alarm	not set for StringScalar
	//	max_warning	not set for StringScalar
	//	min_warning	not set for StringScalar
	//	delta_t	not set for StringScalar
	//	delta_val	not set for StringScalar
	stringscalar->set_default_properties(stringscalar_prop);
	//	Not Polled
	stringscalar->set_disp_level(Tango::OPERATOR);
	stringscalar->set_memorized();
	stringscalar->set_memorized_init(true);
	att_list.push_back(stringscalar);

	//	Attribute : StringRoScalar
	StringRoScalarAttrib	*stringroscalar = new StringRoScalarAttrib();
	Tango::UserDefaultAttrProp	stringroscalar_prop;
	//	description	not set for StringRoScalar
	//	label	not set for StringRoScalar
	//	unit	not set for StringRoScalar
	//	standard_unit	not set for StringRoScalar
	//	display_unit	not set for StringRoScalar
	//	format	not set for StringRoScalar
	//	max_value	not set for StringRoScalar
	//	min_value	not set for StringRoScalar
	//	max_alarm	not set for StringRoScalar
	//	min_alarm	not set for StringRoScalar
	//	max_warning	not set for StringRoScalar
	//	min_warning	not set for StringRoScalar
	//	delta_t	not set for StringRoScalar
	//	delta_val	not set for StringRoScalar
	stringroscalar->set_default_properties(stringroscalar_prop);
	//	Not Polled
	stringroscalar->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(stringroscalar);

	//	Attribute : StringWoScalar
	StringWoScalarAttrib	*stringwoscalar = new StringWoScalarAttrib();
	Tango::UserDefaultAttrProp	stringwoscalar_prop;
	//	description	not set for StringWoScalar
	//	label	not set for StringWoScalar
	//	unit	not set for StringWoScalar
	//	standard_unit	not set for StringWoScalar
	//	display_unit	not set for StringWoScalar
	//	format	not set for StringWoScalar
	//	max_value	not set for StringWoScalar
	//	min_value	not set for StringWoScalar
	//	max_alarm	not set for StringWoScalar
	//	min_alarm	not set for StringWoScalar
	//	max_warning	not set for StringWoScalar
	//	min_warning	not set for StringWoScalar
	//	delta_t	not set for StringWoScalar
	//	delta_val	not set for StringWoScalar
	stringwoscalar->set_default_properties(stringwoscalar_prop);
	//	Not Polled
	stringwoscalar->set_disp_level(Tango::OPERATOR);
	stringwoscalar->set_memorized();
	stringwoscalar->set_memorized_init(true);
	att_list.push_back(stringwoscalar);

	//	Attribute : BooleanScalar
	BooleanScalarAttrib	*booleanscalar = new BooleanScalarAttrib();
	Tango::UserDefaultAttrProp	booleanscalar_prop;
	//	description	not set for BooleanScalar
	//	label	not set for BooleanScalar
	//	unit	not set for BooleanScalar
	//	standard_unit	not set for BooleanScalar
	//	display_unit	not set for BooleanScalar
	//	format	not set for BooleanScalar
	//	max_value	not set for BooleanScalar
	//	min_value	not set for BooleanScalar
	//	max_alarm	not set for BooleanScalar
	//	min_alarm	not set for BooleanScalar
	//	max_warning	not set for BooleanScalar
	//	min_warning	not set for BooleanScalar
	//	delta_t	not set for BooleanScalar
	//	delta_val	not set for BooleanScalar
	booleanscalar->set_default_properties(booleanscalar_prop);
	//	Not Polled
	booleanscalar->set_disp_level(Tango::OPERATOR);
	booleanscalar->set_memorized();
	booleanscalar->set_memorized_init(true);
	att_list.push_back(booleanscalar);

	//	Attribute : BooleanRoScalar
	BooleanRoScalarAttrib	*booleanroscalar = new BooleanRoScalarAttrib();
	Tango::UserDefaultAttrProp	booleanroscalar_prop;
	//	description	not set for BooleanRoScalar
	//	label	not set for BooleanRoScalar
	//	unit	not set for BooleanRoScalar
	//	standard_unit	not set for BooleanRoScalar
	//	display_unit	not set for BooleanRoScalar
	//	format	not set for BooleanRoScalar
	//	max_value	not set for BooleanRoScalar
	//	min_value	not set for BooleanRoScalar
	//	max_alarm	not set for BooleanRoScalar
	//	min_alarm	not set for BooleanRoScalar
	//	max_warning	not set for BooleanRoScalar
	//	min_warning	not set for BooleanRoScalar
	//	delta_t	not set for BooleanRoScalar
	//	delta_val	not set for BooleanRoScalar
	booleanroscalar->set_default_properties(booleanroscalar_prop);
	//	Not Polled
	booleanroscalar->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(booleanroscalar);

	//	Attribute : BooleanWoScalar
	BooleanWoScalarAttrib	*booleanwoscalar = new BooleanWoScalarAttrib();
	Tango::UserDefaultAttrProp	booleanwoscalar_prop;
	//	description	not set for BooleanWoScalar
	//	label	not set for BooleanWoScalar
	//	unit	not set for BooleanWoScalar
	//	standard_unit	not set for BooleanWoScalar
	//	display_unit	not set for BooleanWoScalar
	//	format	not set for BooleanWoScalar
	//	max_value	not set for BooleanWoScalar
	//	min_value	not set for BooleanWoScalar
	//	max_alarm	not set for BooleanWoScalar
	//	min_alarm	not set for BooleanWoScalar
	//	max_warning	not set for BooleanWoScalar
	//	min_warning	not set for BooleanWoScalar
	//	delta_t	not set for BooleanWoScalar
	//	delta_val	not set for BooleanWoScalar
	booleanwoscalar->set_default_properties(booleanwoscalar_prop);
	//	Not Polled
	booleanwoscalar->set_disp_level(Tango::OPERATOR);
	booleanwoscalar->set_memorized();
	booleanwoscalar->set_memorized_init(false);
	att_list.push_back(booleanwoscalar);

	//	Attribute : DoubleSpectrum
	DoubleSpectrumAttrib	*doublespectrum = new DoubleSpectrumAttrib();
	Tango::UserDefaultAttrProp	doublespectrum_prop;
	//	description	not set for DoubleSpectrum
	//	label	not set for DoubleSpectrum
	//	unit	not set for DoubleSpectrum
	//	standard_unit	not set for DoubleSpectrum
	//	display_unit	not set for DoubleSpectrum
	//	format	not set for DoubleSpectrum
	//	max_value	not set for DoubleSpectrum
	//	min_value	not set for DoubleSpectrum
	//	max_alarm	not set for DoubleSpectrum
	//	min_alarm	not set for DoubleSpectrum
	//	max_warning	not set for DoubleSpectrum
	//	min_warning	not set for DoubleSpectrum
	//	delta_t	not set for DoubleSpectrum
	//	delta_val	not set for DoubleSpectrum
	doublespectrum->set_default_properties(doublespectrum_prop);
	//	Not Polled
	doublespectrum->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(doublespectrum);

	//	Attribute : DoubleRoSpectrum
	DoubleRoSpectrumAttrib	*doublerospectrum = new DoubleRoSpectrumAttrib();
	Tango::UserDefaultAttrProp	doublerospectrum_prop;
	//	description	not set for DoubleRoSpectrum
	//	label	not set for DoubleRoSpectrum
	//	unit	not set for DoubleRoSpectrum
	//	standard_unit	not set for DoubleRoSpectrum
	//	display_unit	not set for DoubleRoSpectrum
	//	format	not set for DoubleRoSpectrum
	//	max_value	not set for DoubleRoSpectrum
	//	min_value	not set for DoubleRoSpectrum
	//	max_alarm	not set for DoubleRoSpectrum
	//	min_alarm	not set for DoubleRoSpectrum
	//	max_warning	not set for DoubleRoSpectrum
	//	min_warning	not set for DoubleRoSpectrum
	//	delta_t	not set for DoubleRoSpectrum
	//	delta_val	not set for DoubleRoSpectrum
	doublerospectrum->set_default_properties(doublerospectrum_prop);
	//	Not Polled
	doublerospectrum->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(doublerospectrum);

	//	Attribute : DoubleWoSpectrum
	DoubleWoSpectrumAttrib	*doublewospectrum = new DoubleWoSpectrumAttrib();
	Tango::UserDefaultAttrProp	doublewospectrum_prop;
	//	description	not set for DoubleWoSpectrum
	//	label	not set for DoubleWoSpectrum
	//	unit	not set for DoubleWoSpectrum
	//	standard_unit	not set for DoubleWoSpectrum
	//	display_unit	not set for DoubleWoSpectrum
	//	format	not set for DoubleWoSpectrum
	//	max_value	not set for DoubleWoSpectrum
	//	min_value	not set for DoubleWoSpectrum
	//	max_alarm	not set for DoubleWoSpectrum
	//	min_alarm	not set for DoubleWoSpectrum
	//	max_warning	not set for DoubleWoSpectrum
	//	min_warning	not set for DoubleWoSpectrum
	//	delta_t	not set for DoubleWoSpectrum
	//	delta_val	not set for DoubleWoSpectrum
	doublewospectrum->set_default_properties(doublewospectrum_prop);
	//	Not Polled
	doublewospectrum->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(doublewospectrum);

	//	Attribute : FloatSpectrum
	FloatSpectrumAttrib	*floatspectrum = new FloatSpectrumAttrib();
	Tango::UserDefaultAttrProp	floatspectrum_prop;
	//	description	not set for FloatSpectrum
	//	label	not set for FloatSpectrum
	//	unit	not set for FloatSpectrum
	//	standard_unit	not set for FloatSpectrum
	//	display_unit	not set for FloatSpectrum
	//	format	not set for FloatSpectrum
	//	max_value	not set for FloatSpectrum
	//	min_value	not set for FloatSpectrum
	//	max_alarm	not set for FloatSpectrum
	//	min_alarm	not set for FloatSpectrum
	//	max_warning	not set for FloatSpectrum
	//	min_warning	not set for FloatSpectrum
	//	delta_t	not set for FloatSpectrum
	//	delta_val	not set for FloatSpectrum
	floatspectrum->set_default_properties(floatspectrum_prop);
	//	Not Polled
	floatspectrum->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(floatspectrum);

	//	Attribute : FloatRoSpectrum
	FloatRoSpectrumAttrib	*floatrospectrum = new FloatRoSpectrumAttrib();
	Tango::UserDefaultAttrProp	floatrospectrum_prop;
	//	description	not set for FloatRoSpectrum
	//	label	not set for FloatRoSpectrum
	//	unit	not set for FloatRoSpectrum
	//	standard_unit	not set for FloatRoSpectrum
	//	display_unit	not set for FloatRoSpectrum
	//	format	not set for FloatRoSpectrum
	//	max_value	not set for FloatRoSpectrum
	//	min_value	not set for FloatRoSpectrum
	//	max_alarm	not set for FloatRoSpectrum
	//	min_alarm	not set for FloatRoSpectrum
	//	max_warning	not set for FloatRoSpectrum
	//	min_warning	not set for FloatRoSpectrum
	//	delta_t	not set for FloatRoSpectrum
	//	delta_val	not set for FloatRoSpectrum
	floatrospectrum->set_default_properties(floatrospectrum_prop);
	//	Not Polled
	floatrospectrum->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(floatrospectrum);

	//	Attribute : FloatWoSpectrum
	FloatWoSpectrumAttrib	*floatwospectrum = new FloatWoSpectrumAttrib();
	Tango::UserDefaultAttrProp	floatwospectrum_prop;
	//	description	not set for FloatWoSpectrum
	//	label	not set for FloatWoSpectrum
	//	unit	not set for FloatWoSpectrum
	//	standard_unit	not set for FloatWoSpectrum
	//	display_unit	not set for FloatWoSpectrum
	//	format	not set for FloatWoSpectrum
	//	max_value	not set for FloatWoSpectrum
	//	min_value	not set for FloatWoSpectrum
	//	max_alarm	not set for FloatWoSpectrum
	//	min_alarm	not set for FloatWoSpectrum
	//	max_warning	not set for FloatWoSpectrum
	//	min_warning	not set for FloatWoSpectrum
	//	delta_t	not set for FloatWoSpectrum
	//	delta_val	not set for FloatWoSpectrum
	floatwospectrum->set_default_properties(floatwospectrum_prop);
	//	Not Polled
	floatwospectrum->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(floatwospectrum);

	//	Attribute : IntSpectrum
	IntSpectrumAttrib	*intspectrum = new IntSpectrumAttrib();
	Tango::UserDefaultAttrProp	intspectrum_prop;
	//	description	not set for IntSpectrum
	//	label	not set for IntSpectrum
	//	unit	not set for IntSpectrum
	//	standard_unit	not set for IntSpectrum
	//	display_unit	not set for IntSpectrum
	//	format	not set for IntSpectrum
	//	max_value	not set for IntSpectrum
	//	min_value	not set for IntSpectrum
	//	max_alarm	not set for IntSpectrum
	//	min_alarm	not set for IntSpectrum
	//	max_warning	not set for IntSpectrum
	//	min_warning	not set for IntSpectrum
	//	delta_t	not set for IntSpectrum
	//	delta_val	not set for IntSpectrum
	intspectrum->set_default_properties(intspectrum_prop);
	//	Not Polled
	intspectrum->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(intspectrum);

	//	Attribute : IntRoSpectrum
	IntRoSpectrumAttrib	*introspectrum = new IntRoSpectrumAttrib();
	Tango::UserDefaultAttrProp	introspectrum_prop;
	//	description	not set for IntRoSpectrum
	//	label	not set for IntRoSpectrum
	//	unit	not set for IntRoSpectrum
	//	standard_unit	not set for IntRoSpectrum
	//	display_unit	not set for IntRoSpectrum
	//	format	not set for IntRoSpectrum
	//	max_value	not set for IntRoSpectrum
	//	min_value	not set for IntRoSpectrum
	//	max_alarm	not set for IntRoSpectrum
	//	min_alarm	not set for IntRoSpectrum
	//	max_warning	not set for IntRoSpectrum
	//	min_warning	not set for IntRoSpectrum
	//	delta_t	not set for IntRoSpectrum
	//	delta_val	not set for IntRoSpectrum
	introspectrum->set_default_properties(introspectrum_prop);
	//	Not Polled
	introspectrum->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(introspectrum);

	//	Attribute : IntWoSpectrum
	IntWoSpectrumAttrib	*intwospectrum = new IntWoSpectrumAttrib();
	Tango::UserDefaultAttrProp	intwospectrum_prop;
	//	description	not set for IntWoSpectrum
	//	label	not set for IntWoSpectrum
	//	unit	not set for IntWoSpectrum
	//	standard_unit	not set for IntWoSpectrum
	//	display_unit	not set for IntWoSpectrum
	//	format	not set for IntWoSpectrum
	//	max_value	not set for IntWoSpectrum
	//	min_value	not set for IntWoSpectrum
	//	max_alarm	not set for IntWoSpectrum
	//	min_alarm	not set for IntWoSpectrum
	//	max_warning	not set for IntWoSpectrum
	//	min_warning	not set for IntWoSpectrum
	//	delta_t	not set for IntWoSpectrum
	//	delta_val	not set for IntWoSpectrum
	intwospectrum->set_default_properties(intwospectrum_prop);
	//	Not Polled
	intwospectrum->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(intwospectrum);

	//	Attribute : StringSpectrum
	StringSpectrumAttrib	*stringspectrum = new StringSpectrumAttrib();
	Tango::UserDefaultAttrProp	stringspectrum_prop;
	//	description	not set for StringSpectrum
	//	label	not set for StringSpectrum
	//	unit	not set for StringSpectrum
	//	standard_unit	not set for StringSpectrum
	//	display_unit	not set for StringSpectrum
	//	format	not set for StringSpectrum
	//	max_value	not set for StringSpectrum
	//	min_value	not set for StringSpectrum
	//	max_alarm	not set for StringSpectrum
	//	min_alarm	not set for StringSpectrum
	//	max_warning	not set for StringSpectrum
	//	min_warning	not set for StringSpectrum
	//	delta_t	not set for StringSpectrum
	//	delta_val	not set for StringSpectrum
	stringspectrum->set_default_properties(stringspectrum_prop);
	//	Not Polled
	stringspectrum->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(stringspectrum);

	//	Attribute : StringRoSpectrum
	StringRoSpectrumAttrib	*stringrospectrum = new StringRoSpectrumAttrib();
	Tango::UserDefaultAttrProp	stringrospectrum_prop;
	//	description	not set for StringRoSpectrum
	//	label	not set for StringRoSpectrum
	//	unit	not set for StringRoSpectrum
	//	standard_unit	not set for StringRoSpectrum
	//	display_unit	not set for StringRoSpectrum
	//	format	not set for StringRoSpectrum
	//	max_value	not set for StringRoSpectrum
	//	min_value	not set for StringRoSpectrum
	//	max_alarm	not set for StringRoSpectrum
	//	min_alarm	not set for StringRoSpectrum
	//	max_warning	not set for StringRoSpectrum
	//	min_warning	not set for StringRoSpectrum
	//	delta_t	not set for StringRoSpectrum
	//	delta_val	not set for StringRoSpectrum
	stringrospectrum->set_default_properties(stringrospectrum_prop);
	//	Not Polled
	stringrospectrum->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(stringrospectrum);

	//	Attribute : StringWoSpectrum
	StringWoSpectrumAttrib	*stringwospectrum = new StringWoSpectrumAttrib();
	Tango::UserDefaultAttrProp	stringwospectrum_prop;
	//	description	not set for StringWoSpectrum
	//	label	not set for StringWoSpectrum
	//	unit	not set for StringWoSpectrum
	//	standard_unit	not set for StringWoSpectrum
	//	display_unit	not set for StringWoSpectrum
	//	format	not set for StringWoSpectrum
	//	max_value	not set for StringWoSpectrum
	//	min_value	not set for StringWoSpectrum
	//	max_alarm	not set for StringWoSpectrum
	//	min_alarm	not set for StringWoSpectrum
	//	max_warning	not set for StringWoSpectrum
	//	min_warning	not set for StringWoSpectrum
	//	delta_t	not set for StringWoSpectrum
	//	delta_val	not set for StringWoSpectrum
	stringwospectrum->set_default_properties(stringwospectrum_prop);
	//	Not Polled
	stringwospectrum->set_disp_level(Tango::OPERATOR);


	att_list.push_back(stringwospectrum);

	BooleanSpectrumAttrib	*booleanspectrum = new BooleanSpectrumAttrib();
	Tango::UserDefaultAttrProp	booleanspectrum_prop;
	//	description	not set for StringSpectrum
	//	label	not set for StringSpectrum
	//	unit	not set for StringSpectrum
	//	standard_unit	not set for StringSpectrum
	//	display_unit	not set for StringSpectrum
	//	format	not set for StringSpectrum
	//	max_value	not set for StringSpectrum
	//	min_value	not set for StringSpectrum
	//	max_alarm	not set for StringSpectrum
	//	min_alarm	not set for StringSpectrum
	//	max_warning	not set for StringSpectrum
	//	min_warning	not set for StringSpectrum
	//	delta_t	not set for StringSpectrum
	//	delta_val	not set for StringSpectrum
	booleanspectrum->set_default_properties(booleanspectrum_prop);
	//	Not Polled
	booleanspectrum->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(booleanspectrum);

	//	Create a list of static attributes
	create_static_attribute_list(get_class_attr()->get_attr_list());
	/*----- PROTECTED REGION ID(TangoTestServerClass::attribute_factory_after) ENABLED START -----*/
    /* clang-format on */
    //	Add your own code
    /* clang-format off */
	/*----- PROTECTED REGION END -----*/	//	TangoTestServerClass::attribute_factory_after
}
/*--------------------------------------------------------------------------------------------------------------------*/
/**
 *	Method      : TangoTestServerClass::pipe_factory()
 * Description:  Create the pipe object(s)
 *                and store them in the pipe list
 */
/*--------------------------------------------------------------------------------------------------------------------*/
void TangoTestServerClass::pipe_factory()
{
	/*----- PROTECTED REGION ID(TangoTestServerClass::pipe_factory_before) ENABLED START -----*/
    /* clang-format on */
    //	Add your own code
    /* clang-format off */
	/*----- PROTECTED REGION END -----*/	//	TangoTestServerClass::pipe_factory_before
	/*----- PROTECTED REGION ID(TangoTestServerClass::pipe_factory_after) ENABLED START -----*/
    /* clang-format on */
    //	Add your own code
    /* clang-format off */
	/*----- PROTECTED REGION END -----*/	//	TangoTestServerClass::pipe_factory_after
}
/*--------------------------------------------------------------------------------------------------------------------*/
/**
 *	Method      : TangoTestServerClass::command_factory()
 * Description:  Create the command object(s)
 *                and store them in the command list
 */
/*--------------------------------------------------------------------------------------------------------------------*/
void TangoTestServerClass::command_factory()
{
	/*----- PROTECTED REGION ID(TangoTestServerClass::command_factory_before) ENABLED START -----*/
    /* clang-format on */
    //	Add your own code
    /* clang-format off */
	/*----- PROTECTED REGION END -----*/	//	TangoTestServerClass::command_factory_before


	/*----- PROTECTED REGION ID(TangoTestServerClass::command_factory_after) ENABLED START -----*/
    /* clang-format on */
    //	Add your own code
    /* clang-format off */
	/*----- PROTECTED REGION END -----*/	//	TangoTestServerClass::command_factory_after
}

//===================================================================
//	Dynamic attributes related methods
//===================================================================

/*--------------------------------------------------------------------------------------------------------------------*/
/**
 * method : 		TangoTestServerClass::create_static_attribute_list
 * description : 	Create the a list of static attributes
 *
 * @param	att_list	the created attribute list
 */
/*--------------------------------------------------------------------------------------------------------------------*/
void TangoTestServerClass::create_static_attribute_list(std::vector<Tango::Attr *> &att_list)
{
	for (unsigned long i=0 ; i<att_list.size() ; i++)
	{
		std::string att_name(att_list[i]->get_name());
		transform(att_name.begin(), att_name.end(), att_name.begin(), ::tolower);
		defaultAttList.push_back(att_name);
	}

	TANGO_LOG_INFO << defaultAttList.size() << " attributes in default list" << std::endl;

	/*----- PROTECTED REGION ID(TangoTestServerClass::create_static_att_list) ENABLED START -----*/
    /* clang-format on */
    /* clang-format off */
	/*----- PROTECTED REGION END -----*/	//	TangoTestServerClass::create_static_att_list
}


/*--------------------------------------------------------------------------------------------------------------------*/
/**
 * method : 		TangoTestServerClass::erase_dynamic_attributes
 * description : 	delete the dynamic attributes if any.
 *
 * @param	devlist_ptr	the device list pointer
 * @param	list of all attributes
 */
/*--------------------------------------------------------------------------------------------------------------------*/
void TangoTestServerClass::erase_dynamic_attributes(const Tango::DevVarStringArray *devlist_ptr, std::vector<Tango::Attr *> &att_list)
{
	Tango::Util *tg = Tango::Util::instance();

	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{
		Tango::DeviceImpl *dev_impl = tg->get_device_by_name(((std::string)(*devlist_ptr)[i]).c_str());
		TangoTestServer *dev = static_cast<TangoTestServer *> (dev_impl);

		std::vector<Tango::Attribute *> &dev_att_list = dev->get_device_attr()->get_attribute_list();
		std::vector<Tango::Attribute *>::iterator ite_att;
		for (ite_att=dev_att_list.begin() ; ite_att != dev_att_list.end() ; ++ite_att)
		{
			std::string att_name((*ite_att)->get_name_lower());
			if ((att_name == "state") || (att_name == "status"))
				continue;
			std::vector<std::string>::iterator ite_str = find(defaultAttList.begin(), defaultAttList.end(), att_name);
			if (ite_str == defaultAttList.end())
			{
				TANGO_LOG_INFO << att_name << " is a UNWANTED dynamic attribute for device " << (*devlist_ptr)[i] << std::endl;
				Tango::Attribute &att = dev->get_device_attr()->get_attr_by_name(att_name.c_str());
				dev->remove_attribute(att_list[att.get_attr_idx()], true, false);
				--ite_att;
			}
		}
	}
	/*----- PROTECTED REGION ID(TangoTestServerClass::erase_dynamic_attributes) ENABLED START -----*/
    /* clang-format on */
    /* clang-format off */
	/*----- PROTECTED REGION END -----*/	//	TangoTestServerClass::erase_dynamic_attributes
}

/*--------------------------------------------------------------------------------------------------------------------*/
/**
 *	Method      : TangoTestServerClass::get_attr_object_by_name()
 * Description:  returns Tango::Attr * object found by name
 */
/*--------------------------------------------------------------------------------------------------------------------*/
Tango::Attr *TangoTestServerClass::get_attr_object_by_name(std::vector<Tango::Attr *> &att_list, std::string attname)
{
	std::vector<Tango::Attr *>::iterator it;
	for (it=att_list.begin() ; it<att_list.end() ; ++it)
		if ((*it)->get_name()==attname)
			return (*it);
	//	Attr does not exist
	return NULL;
}


/*----- PROTECTED REGION ID(TangoTestServerClass::Additional Methods) ENABLED START -----*/
  /* clang-format on */
  /* clang-format off */
/*----- PROTECTED REGION END -----*/	//	TangoTestServerClass::Additional Methods
} //	namespace
